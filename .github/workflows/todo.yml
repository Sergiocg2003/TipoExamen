# name: CI/CD completo

# env:
#   IMAGE_NAME: fastapi
#   # FILES: compose.yml

# # GitHub Secrets
# # DH_USUARIO
# # DH_TOKEN
# # AMZ_IP
# # AMZ_USUARIO
# # AMZ_CLAVE

# on:
#   push:
#     branches: [ main ]
#   pull_request:
#     branches: [ main ]
    
#     # se comenta para no interferir en protecci√≥n de ramas
#     # paths:
#     #   - '**.py'

# jobs:

#   # lint:
#   #   runs-on: ubuntu-latest
#   #   steps:
#   #     - uses: actions/checkout@v2
#   #     - name: Set up Python 3.8
#   #       uses: actions/setup-python@v2
#   #     - name: Install dependencies
#   #       run: |
#   #         python -m pip install --upgrade pip
#   #         pip install flake8
#   #     - name: Lint with flake8
#   #       run: |
#   #         flake8 . --count --show-source --statistics
#   #         flake8 . --count --max-complexity=10 --max-line-length=79 --statistics

#   build_and_push:
#     runs-on: ubuntu-latest
#     # needs: lint
#     steps:
#       - uses: actions/checkout@v4
#       - name: Login to DockerHub
#         uses: docker/login-action@v3
#         with:
#           username: ${{ secrets.DH_USUARIO }}
#           password: ${{ secrets.DH_TOKEN }}
#       - name: Build and push Docker image
#         uses: docker/build-push-action@v6
#         with:
#           context: .
#           push: true
#           tags: ${{ secrets.DH_USUARIO }}/${{ env.IMAGE_NAME }}

#   deploy:
#     name: deploy en AWS
#     runs-on: ubuntu-latest
#     needs: build_and_push
#     steps:
#       - name: multiple command
#         uses: appleboy/ssh-action@master
#         with:
#           host: ${{ secrets.AMZ_IP }}
#           username: ${{ secrets.AMZ_USUARIO }}
#           key: ${{ secrets.AMZ_CLAVE }}
#           port: 22 # ${{ secrets.PORT }}
#           script: |
#             sleep 30
#             docker rm -f web1
#             docker rmi ${{ secrets.DH_USUARIO }}/${{ env.IMAGE_NAME }}
#             docker run -d -p 80:5000 --name web1 ${{secrets.DH_USUARIO}}/${{env.IMAGE_NAME}}

name: CI/CD completo

env:
  IMAGE_NAME: fastapi

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:

  build_and_push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DH_USUARIO }}
          password: ${{ secrets.DH_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ secrets.DH_USUARIO }}/${{ env.IMAGE_NAME }}

  deploy:
    name: Deploy en AWS EC2
    runs-on: ubuntu-latest
    needs: build_and_push
    steps:
      - name: SSH and deploy on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AMZ_IP }}
          username: ${{ secrets.AMZ_USUARIO }}
          key: ${{ secrets.AMZ_CLAVE }}
          port: 22
          script: |
            echo "‚è≥ Esperando 30 segundos por seguridad..."
            sleep 30

            echo "üßπ Eliminando contenedor anterior si existe..."
            docker rm -f web1 || true

            echo "üßπ Liberando puerto 80 si est√° ocupado..."
            docker ps --filter "publish=80" -q | xargs -r docker rm -f

            echo "üîÑ Eliminando imagen antigua (si no est√° en uso)..."
            docker image rm ${{ secrets.DH_USUARIO }}/${{ env.IMAGE_NAME }} || true

            echo "üì• Descargando √∫ltima imagen..."
            docker pull ${{ secrets.DH_USUARIO }}/${{ env.IMAGE_NAME }}

            echo "üöÄ Ejecutando contenedor en puerto 80..."
            docker run -d -p 80:80 --name web1 ${{ secrets.DH_USUARIO }}/${{ env.IMAGE_NAME }}

            echo "‚úÖ Despliegue completado. Comprueba en http://${{ secrets.AMZ_IP }}/docs"
